package net.gongmingqm10.traintimer.data;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import net.gongmingqm10.traintimer.data.Trip;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRIP".
*/
public class TripDao extends AbstractDao<Trip, Long> {

    public static final String TABLENAME = "TRIP";

    /**
     * Properties of entity Trip.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TripDate = new Property(1, java.util.Date.class, "tripDate", false, "TRIP_DATE");
        public final static Property TrainNumber = new Property(2, String.class, "trainNumber", false, "TRAIN_NUMBER");
        public final static Property ScheduledArriveTime = new Property(3, String.class, "scheduledArriveTime", false, "SCHEDULED_ARRIVE_TIME");
        public final static Property ScheduledDepartTime = new Property(4, String.class, "scheduledDepartTime", false, "SCHEDULED_DEPART_TIME");
        public final static Property ArriveTime = new Property(5, String.class, "arriveTime", false, "ARRIVE_TIME");
        public final static Property DepartTime = new Property(6, String.class, "departTime", false, "DEPART_TIME");
        public final static Property ArriveMessage = new Property(7, String.class, "arriveMessage", false, "ARRIVE_MESSAGE");
        public final static Property DepartMessage = new Property(8, String.class, "departMessage", false, "DEPART_MESSAGE");
        public final static Property HasReminder = new Property(9, Boolean.class, "hasReminder", false, "HAS_REMINDER");
        public final static Property StationId = new Property(10, long.class, "stationId", false, "STATION_ID");
    };

    private DaoSession daoSession;


    public TripDao(DaoConfig config) {
        super(config);
    }
    
    public TripDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRIP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TRIP_DATE\" INTEGER," + // 1: tripDate
                "\"TRAIN_NUMBER\" TEXT NOT NULL ," + // 2: trainNumber
                "\"SCHEDULED_ARRIVE_TIME\" TEXT," + // 3: scheduledArriveTime
                "\"SCHEDULED_DEPART_TIME\" TEXT," + // 4: scheduledDepartTime
                "\"ARRIVE_TIME\" TEXT," + // 5: arriveTime
                "\"DEPART_TIME\" TEXT," + // 6: departTime
                "\"ARRIVE_MESSAGE\" TEXT," + // 7: arriveMessage
                "\"DEPART_MESSAGE\" TEXT," + // 8: departMessage
                "\"HAS_REMINDER\" INTEGER," + // 9: hasReminder
                "\"STATION_ID\" INTEGER NOT NULL );"); // 10: stationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRIP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Trip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date tripDate = entity.getTripDate();
        if (tripDate != null) {
            stmt.bindLong(2, tripDate.getTime());
        }
        stmt.bindString(3, entity.getTrainNumber());
 
        String scheduledArriveTime = entity.getScheduledArriveTime();
        if (scheduledArriveTime != null) {
            stmt.bindString(4, scheduledArriveTime);
        }
 
        String scheduledDepartTime = entity.getScheduledDepartTime();
        if (scheduledDepartTime != null) {
            stmt.bindString(5, scheduledDepartTime);
        }
 
        String arriveTime = entity.getArriveTime();
        if (arriveTime != null) {
            stmt.bindString(6, arriveTime);
        }
 
        String departTime = entity.getDepartTime();
        if (departTime != null) {
            stmt.bindString(7, departTime);
        }
 
        String arriveMessage = entity.getArriveMessage();
        if (arriveMessage != null) {
            stmt.bindString(8, arriveMessage);
        }
 
        String departMessage = entity.getDepartMessage();
        if (departMessage != null) {
            stmt.bindString(9, departMessage);
        }
 
        Boolean hasReminder = entity.getHasReminder();
        if (hasReminder != null) {
            stmt.bindLong(10, hasReminder ? 1L: 0L);
        }
        stmt.bindLong(11, entity.getStationId());
    }

    @Override
    protected void attachEntity(Trip entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Trip readEntity(Cursor cursor, int offset) {
        Trip entity = new Trip( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // tripDate
            cursor.getString(offset + 2), // trainNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // scheduledArriveTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // scheduledDepartTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // arriveTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // departTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // arriveMessage
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // departMessage
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // hasReminder
            cursor.getLong(offset + 10) // stationId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Trip entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTripDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setTrainNumber(cursor.getString(offset + 2));
        entity.setScheduledArriveTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScheduledDepartTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArriveTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDepartTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setArriveMessage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDepartMessage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHasReminder(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setStationId(cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Trip entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Trip entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getStationDao().getAllColumns());
            builder.append(" FROM TRIP T");
            builder.append(" LEFT JOIN STATION T0 ON T.\"STATION_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Trip loadCurrentDeep(Cursor cursor, boolean lock) {
        Trip entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Station station = loadCurrentOther(daoSession.getStationDao(), cursor, offset);
         if(station != null) {
            entity.setStation(station);
        }

        return entity;    
    }

    public Trip loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Trip> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Trip> list = new ArrayList<Trip>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Trip> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Trip> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
