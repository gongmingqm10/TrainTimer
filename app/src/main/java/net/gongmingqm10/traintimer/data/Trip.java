package net.gongmingqm10.traintimer.data;

import net.gongmingqm10.traintimer.data.DaoSession;

import java.io.Serializable;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TRIP".
 */
public class Trip implements Serializable {

    private Long id;
    private java.util.Date tripDate;
    /** Not-null value. */
    private String trainNumber;
    private String scheduledArriveTime;
    private String scheduledDepartTime;
    private String arriveTime;
    private String departTime;
    private String arriveMessage;
    private String departMessage;
    private Boolean hasReminder;
    private long stationId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TripDao myDao;

    private Station station;
    private Long station__resolvedKey;


    public Trip() {
    }

    public Trip(Long id) {
        this.id = id;
    }

    public Trip(Long id, java.util.Date tripDate, String trainNumber, String scheduledArriveTime, String scheduledDepartTime, String arriveTime, String departTime, String arriveMessage, String departMessage, Boolean hasReminder, long stationId) {
        this.id = id;
        this.tripDate = tripDate;
        this.trainNumber = trainNumber;
        this.scheduledArriveTime = scheduledArriveTime;
        this.scheduledDepartTime = scheduledDepartTime;
        this.arriveTime = arriveTime;
        this.departTime = departTime;
        this.arriveMessage = arriveMessage;
        this.departMessage = departMessage;
        this.hasReminder = hasReminder;
        this.stationId = stationId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTripDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getTripDate() {
        return tripDate;
    }

    public void setTripDate(java.util.Date tripDate) {
        this.tripDate = tripDate;
    }

    /** Not-null value. */
    public String getTrainNumber() {
        return trainNumber;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTrainNumber(String trainNumber) {
        this.trainNumber = trainNumber;
    }

    public String getScheduledArriveTime() {
        return scheduledArriveTime;
    }

    public void setScheduledArriveTime(String scheduledArriveTime) {
        this.scheduledArriveTime = scheduledArriveTime;
    }

    public String getScheduledDepartTime() {
        return scheduledDepartTime;
    }

    public void setScheduledDepartTime(String scheduledDepartTime) {
        this.scheduledDepartTime = scheduledDepartTime;
    }

    public String getArriveTime() {
        return arriveTime;
    }

    public void setArriveTime(String arriveTime) {
        this.arriveTime = arriveTime;
    }

    public String getDepartTime() {
        return departTime;
    }

    public void setDepartTime(String departTime) {
        this.departTime = departTime;
    }

    public String getArriveMessage() {
        return arriveMessage;
    }

    public void setArriveMessage(String arriveMessage) {
        this.arriveMessage = arriveMessage;
    }

    public String getDepartMessage() {
        return departMessage;
    }

    public void setDepartMessage(String departMessage) {
        this.departMessage = departMessage;
    }

    public Boolean getHasReminder() {
        return hasReminder;
    }

    public void setHasReminder(Boolean hasReminder) {
        this.hasReminder = hasReminder;
    }

    public long getStationId() {
        return stationId;
    }

    public void setStationId(long stationId) {
        this.stationId = stationId;
    }

    /** To-one relationship, resolved on first access. */
    public Station getStation() {
        long __key = this.stationId;
        if (station__resolvedKey == null || !station__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            StationDao targetDao = daoSession.getStationDao();
            Station stationNew = targetDao.load(__key);
            synchronized (this) {
                station = stationNew;
            	station__resolvedKey = __key;
            }
        }
        return station;
    }

    public void setStation(Station station) {
        if (station == null) {
            throw new DaoException("To-one property 'stationId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.station = station;
            stationId = station.getId();
            station__resolvedKey = stationId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
